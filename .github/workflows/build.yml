name: build and release

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]*'
  pull_request:

concurrency:
  group: >
    ${{ github.workflow }} @
    ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-20.04, windows-2019, macos-11]
        os: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v3
      - name: Restore mtimes of files in repo
        uses: chetan/git-restore-mtime-action@v1.2
      - name: Cargo home cache
        uses: actions/cache@v2
        env:
          cache-name: cargo-home
        with:
          path: ~/cargo-home-dirs
          key: ${{ env.cache-name }}-${{ runner.os }}-v7
      - name: Rust build cache
        uses: actions/cache@v2
        env:
          cache-name: rust-build
        with:
          path: ~/cargo-target-dirs
          key: ${{ env.cache-name }}-${{ runner.os }}-v7-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ env.cache-name }}-${{ runner.os }}-v7-
      - name: Save env vars for cibuildwheel
        run: >
          echo "MAIN_DIR=$PWD" >> "$GITHUB_ENV";
          echo "HOME=$HOME" >> "$GITHUB_ENV"
        shell: bash
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.10.2
        env:
          CIBW_SKIP: >
            *musllinux* *pp*
          CIBW_ENVIRONMENT: >
            HOST_HOME_DIR="${{ env.HOME }}"
            HOST_PROJ_DIR="${{ env.MAIN_DIR }}"
            PROJ_DIR="${{ env.MAIN_DIR }}"
            PATH="${{ env.HOME }}/.cargo/bin:$PATH"
            CARGO_HOME="${{ env.HOME }}/.cargo"
            RUSTUP_HOME="${{ env.HOME }}/.rustup"
            CARGO_TARGET_DIR="${{ env.HOME }}/target"
          CIBW_ENVIRONMENT_LINUX: >
            HOST_HOME_DIR="/host/${{ env.HOME }}"
            HOST_PROJ_DIR="/host/${{ env.MAIN_DIR }}"
            PROJ_DIR="/project"
            PATH="/host/${{ env.HOME }}/.cargo/bin:$PATH"
            CARGO_HOME="/host/${{ env.HOME }}/.cargo"
            RUSTUP_HOME="/host/${{ env.HOME }}/.rustup"
            CARGO_TARGET_DIR="/host/${{ env.HOME }}/target"
          CIBW_BEFORE_ALL: >
            bash $PROJ_DIR/ci-utils/ensure-rust-linux.sh
          CIBW_BEFORE_ALL_WINDOWS: >
            bash %PROJ_DIR%/ci-utils/ensure-rust-win.sh
          CIBW_BEFORE_ALL_MACOS: >
            bash $PROJ_DIR/ci-utils/ensure-rust-macos.sh
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BEFORE_BUILD: >
            bash $PROJ_DIR/ci-utils/before-build.sh; ls -l $PROJ_DIR/src; ls -l $PROJ_DIR/target || true
          CIBW_BEFORE_BUILD_WINDOWS: >
            bash ci-utils/before-build.sh
          CIBW_TEST_COMMAND: >
            bash $PROJ_DIR/ci-utils/after-build.sh; ls -l $PROJ_DIR
          CIBW_TEST_COMMAND_WINDOWS: >
            bash %PROJ_DIR%/ci-utils/after-build.sh
      - name: Display Rust build cache contents
        run: ls ~/cargo-target-dirs
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        run: pipx run build --sdist
      - name: Install tool to post-process sdist to make extension optional
        run: pip install 'postprocess-sdist-make-rust-ext-opt>=0.2,<0.3'
      - name: Post-process sdist to make extension optional
        run: postprocess-sdist-make-rust-ext-opt -fO dist dist/*.tar.gz
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          # testing:
          #repository_url: https://test.pypi.org/legacy/
          #password: ${{ secrets.TEST_PYPI_API_TOKEN }}
